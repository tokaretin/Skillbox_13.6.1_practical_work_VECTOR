/*Задача 1
Что нужно сделать
Необходимо из заданного пользователем вектора удалить число X.

Как работает программа
- Пользователь вводит с клавиатуры число n — размер вектора, который надо заполнять.
- Пользователь вводит n целых чисел, которые заполняют вектор.
Пользователь вводит значение — X. X — удаляемое из вектора значение. Необходимо 
удалить из вектора все элементы, которые равны заданному значению.
- В конце программы необходимо вывести итоговое состояние вектора.
Пример выполнения
Input vector size: 5 
Input numbers: 1 3 3 5 1 
Input number to delete: 3 
Result: 1 5 1

Пояснение

Пользователь ввёл 5, потом числа 1, 3, 3, 5, 1 и потом число 3. В векторе должны 
остаться числа 1, 5, 1, которые надо вывести на экран.

Что оценивается
Не удалено лишних элементов.
Все элементы, которые необходимо удалить, удалены.
Для удаления элементов из вектора использована функция pop_back()
Удаления из вектора совершены in-place, т.е. при удалении из вектора не используются 
дополнительные структуры данных или переменные.
Решение использует только один вектор.*/

#include <iostream>
#include <vector>

int main()
{
    // Пользователь вводит с клавиатуры число n — размер вектора, который надо заполнять.
    int size;
    std::cout << "Enter the size elemets to vector: ";
    std::cin >> size;
    std::cout << '\n';
    
    // Создаем вектор для хранения номеров 
    std::vector<int> vec(size);
 
    // Пользователь вводит n целых чисел, которые заполняют вектор.
    for (int i = 0; i < vec.size(); i++)
    {
        std::cout << "Enter the " << i + 1 << " element in the vector: ";
        std::cin >> vec[i];            
    }
    std::cout << '\n';

    // Пользователь вводит значение — X. X — удаляемое из вектора значение. 
    // Необходимо удалить из вектора все элементы, которые равны заданному значению.
    std::cout << "Enter the item you want to delete: ";
    int deletElement;
    std::cin >> deletElement;

    // Удаляем все элементы равные заданному значению
    for (int i = vec.size() - 1; i >= 0; i--)
    {
        if (vec[i] == deletElement) 
        {
            vec.erase(vec.begin() + i); // vec.erase() для удаления этого элемента. vec.begin() + i указывает на итератор, указывающий на элемент, который нужно удалить.
        }
    }
    std::cout << '\n';
   
    // Итоговое состояние вектора
    std::cout << "All elements in the vector: ";
    if (vec.empty())
    {
        std::cout << "The vector is empty " << '\n';
    }
    else
    {
        for (int i = 0; i < vec.size(); i++)
        {
            std::cout << vec[i];
            if (i != vec.size() - 1)
                std::cout << ", ";
        }
    }
}

